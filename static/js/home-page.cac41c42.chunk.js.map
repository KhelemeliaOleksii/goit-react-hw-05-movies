{"version":3,"file":"static/js/home-page.cac41c42.chunk.js","mappings":"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","sources":["components/MovieGallary/MovieGallary.js","webpack://react-homework-template/./src/components/PageHeading/PageHeading.module.css?b132","components/PageHeading/PageHeading.js","pages/HomePage/HomePage.js","services/themoviedbAPI/requestAPI.js","services/themoviedbAPI/themoviedbAPI.js","utils/mapper.js","utils/messenger.js"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\"\nimport { messenger } from \"utils/messenger\";\nimport PropTypes from \"prop-types\"\n\nexport default function MovieGallary({ movies }) {\n    const location = useLocation();\n\n    if (movies.length === 0) {\n        messenger.alertMessage('No film found');\n        return;\n    }\n    return (\n        <ul>\n            {movies.map(({ id, title }) => {\n                return (\n                    <li key={id}>\n                        <Link\n                            to={`/movies/${id}`}\n                            state={{\n                                from: {\n                                    location,\n                                },\n                            }}\n                        >{title}</Link>\n                    </li>\n                )\n            })}\n        </ul >\n    )\n}\n\nMovieGallary.propTypes = {\n    movies: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n        }).isRequired\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"page-heading\":\"PageHeading_page-heading__7LkdJ\"};","import styles from './PageHeading.module.css'\nexport default function PageHeading({ children }) {\n    return (\n        <h1 className={styles['page-heading']}>\n            {children}\n        </h1>\n    )\n}","import MovieGallary from \"components/MovieGallary\";\nimport Loader from \"components/Loader\";\nimport PageHeading from \"components/PageHeading\";\nimport { useEffect, useState } from \"react\"\n\nimport themoviedbAPI from \"services/themoviedbAPI/themoviedbAPI\";\nimport { mapper } from \"utils/mapper\";\nimport { messenger } from 'utils/messenger'\n\nconst STATUS = {\n    idle: 'idle',\n    resolve: 'resolve',\n    reject: 'reject',\n    pending: 'pending',\n}\n\n/* function MoviesPage\ndo: - request on trends movies\n    - render gallary of trends movies \nuse: useState() - save \"movies\" - result array of search request\n                - save 'error' - error object if request return error\n                - save 'status' - machine state of request procedure\nout: - search form\n    \"pending\" - Loader\n    \"resolve\" - Gallary\n    \"reject\" - Error\n */\nexport default function HomePage() {\n\n    const [movies, setMovies] = useState([]);\n    const [status, setStatus] = useState(STATUS.idle);\n    const [error, setError] = useState(null);\n\n    /* \n    do: only first rendering\n     */\n    useEffect(() => {\n        fetchTrends();\n\n        /* function fetchSearch\n        do: - set status=pending\n            - fetch\n                <> set movies\n                <> set status=resolve\n            <-> if error\n                <> set error\n                <> set status=reject\n        */\n        function fetchTrends() {\n            setStatus(STATUS.pending);\n            themoviedbAPI\n                .fetchTrendingMovies()\n                .then(({ results, total_results: total }) => {\n                    messenger.successMessage(`We found ${total} movies`);\n                    setMovies(mapper(results));\n                    setStatus(STATUS.resolve);\n                })\n                .catch((error) => {\n                    setError(error);\n                    setStatus(STATUS.reject);\n                })\n        }\n\n    }, []);\n\n\n    return (\n        <>\n            <PageHeading>Trending today</PageHeading>\n            {status === STATUS.pending && <Loader />}\n            {status === STATUS.resolve && <MovieGallary movies={movies} />}\n            {status === STATUS.reject && messenger.errorMessage(error)};\n        </>\n    )\n}\n\n","const http = {\n    async get(url) {\n        const response = await fetch(url);\n        if (response.ok) {\n            return await response.json();\n        }\n        return Promise.reject(new Error('Not found'));\n    }\n};\n\nexport default http;","// trending movies : 'https://api.themoviedb.org/3/trending/movie/day?api_key=<<api_key>>'\n// search movie: 'https://api.themoviedb.org/3/search/movie?api_key=70c5c640dcd47438a9460ce1b8e1a5b1&language=en-US&page=1&include_adult=false&query=king'\n// film info: 'https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US'\n// reviews: 'https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=<<api_key>>&language=en-US&page=1'\n// credits: 'https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US'\n\nimport http from './requestAPI'\n\nconst API_KEY = '70c5c640dcd47438a9460ce1b8e1a5b1';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst DEFAULT_LANGUAGE = 'en-US'\n\nexport const fetchTrendingMovies = (page = 1) => {\n    const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`;\n    return http.get(url);\n}\nexport const fetchByName = (value, page = 1, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=${language}&page=${page}&include_adult=false&query=${value}`;\n    return http.get(url);\n}\nexport const fetchFilmDetails = (movieId, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=${language}`;\n    return http.get(url);\n}\nexport const fetchFilmReviews = (movieId, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=${language}`;\n    return http.get(url);\n}\nexport const fetchFilmCredits = (movieId, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=${language}`;\n    return http.get(url);\n}\n\nconst themoviedbAPI = {\n    fetchTrendingMovies,\n    fetchByName,\n    fetchFilmDetails,\n    fetchFilmReviews,\n    fetchFilmCredits,\n}\n\nexport default themoviedbAPI;","export function mapper(hits) {\n    return hits.map(item => ({\n        id: item.id,\n        title: item.title,\n    })\n    )\n}","export function successMessage(message) {\n    console.log(message);\n}\nexport function alertMessage(message) {\n    console.log(message);\n}\nexport function errorMessage(message) {\n    console.log(message);\n}\n\nexport const messenger = {\n    successMessage,\n    alertMessage,\n    errorMessage,\n};\n\n"],"names":["MovieGallary","movies","location","useLocation","length","map","id","title","to","state","from","messenger","PageHeading","children","className","styles","STATUS","HomePage","useState","setMovies","status","setStatus","error","setError","useEffect","themoviedbAPI","then","results","total","total_results","mapper","catch","Loader","get","url","fetch","response","ok","json","Promise","reject","Error","API_KEY","BASE_URL","DEFAULT_LANGUAGE","fetchTrendingMovies","page","http","fetchByName","value","language","fetchFilmDetails","movieId","fetchFilmReviews","fetchFilmCredits","hits","item","successMessage","message","console","log","alertMessage","errorMessage"],"sourceRoot":""}