{"version":3,"file":"static/js/cast.38e8a608.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/CastRender/CastRender.module.css?29b5","components/CastRender/CastRender.js","components/Cast/Cast.js","services/themoviedbAPI/requestAPI.js","services/themoviedbAPI/themoviedbAPI.js","utils/messenger.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"img\":\"CastRender_img__5niYr\"};","import { messenger } from \"utils/messenger\"\nimport defaultUserImage from 'default-user-image.png'\nimport PropTypes from 'prop-types'\nimport styles from './CastRender.module.css'\nconst IMG_CONFIG = {\n    base_url: 'https://image.tmdb.org/t/p/',\n    size: 'w500'\n}\n\n/* function CastRender\ndo: render a cast list of a movie:\n    -if cast available \n        <>image\n        <>name\n        <>character\n     <-> \"no info found\"   \n */\nexport default function CastRender({ cast }) {\n    const { base_url, size } = IMG_CONFIG;\n    const imgBaseUrl = `${base_url}${size}`;\n    if (cast.length === 0) {\n        messenger.alertMessage('No info found')\n    }\n    return (\n        <ul>\n            {cast.map(({ id, imgPath, name, character, }) =>\n                <li key={id}>\n                    {!imgPath\n                        ? <img src={defaultUserImage} alt={name} className={styles.img} />\n                        : <img src={`${imgBaseUrl}${imgPath}`} alt={name} className={styles.img} />\n                    }\n                    <p>{name}</p>\n                    <p>Character: {character}</p>\n                </li>)}\n        </ul>\n    )\n}\n\nCastRender.propTypes = {\n    cast: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            imgPath: PropTypes.string,\n            name: PropTypes.string.isRequired,\n            character: PropTypes.string.isRequired\n        }).isRequired\n    ).isRequired\n}","import CastRender from \"components/CastRender\";\nimport Loader from \"components/Loader\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\"\nimport themoviedbAPI from \"services/themoviedbAPI/themoviedbAPI\";\nimport { messenger } from \"utils/messenger\";\n\n/* function Cast\ndo: fetch a cast of a movie\n */\nexport default function Cast() {\n    const { movieId } = useParams();\n    const [status, setStatus] = useState('idle');\n    const [error, setError] = useState(null);\n    const [actors, setActors] = useState();\n\n    useEffect(() => {\n        fetch(movieId);\n\n        function fetch(movieId) {\n            setStatus('pending');\n            themoviedbAPI\n                .fetchFilmCredits(movieId)\n                .then(({ cast }) => {\n                    setActors(mapper(cast));\n                    setStatus('resolve');\n                })\n                .catch((error) => {\n                    setError(error);\n                    setStatus('reject')\n                })\n        }\n    }, [movieId])\n    return (\n        <>\n            {status === 'pending' && <Loader />}\n            {status === 'resolve' && <CastRender cast={actors} />}\n            {status === 'reject' && messenger.errorMessage(error.msg)}\n        </>\n    )\n}\n\n/* function mapper\ndo: create and return an array of objects with nessery properties\n*/\nfunction mapper(array) {\n    return array.map(({ id, profile_path: imgPath, name, character }) => {\n        return {\n            id,\n            imgPath,\n            name,\n            character,\n        }\n    })\n}","const http = {\n    async get(url) {\n        const response = await fetch(url);\n        if (response.ok) {\n            return await response.json();\n        }\n        return Promise.reject(new Error('Not found'));\n    }\n};\n\nexport default http;","// trending movies : 'https://api.themoviedb.org/3/trending/movie/day?api_key=<<api_key>>'\n// search movie: 'https://api.themoviedb.org/3/search/movie?api_key=70c5c640dcd47438a9460ce1b8e1a5b1&language=en-US&page=1&include_adult=false&query=king'\n// film info: 'https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US'\n// reviews: 'https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=<<api_key>>&language=en-US&page=1'\n// credits: 'https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US'\n\nimport http from './requestAPI'\n\nconst API_KEY = '70c5c640dcd47438a9460ce1b8e1a5b1';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst DEFAULT_LANGUAGE = 'en-US'\n\nexport const fetchTrendingMovies = (page = 1) => {\n    const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`;\n    return http.get(url);\n}\nexport const fetchByName = (value, page = 1, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=${language}&page=${page}&include_adult=false&query=${value}`;\n    return http.get(url);\n}\nexport const fetchFilmDetails = (movieId, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=${language}`;\n    return http.get(url);\n}\nexport const fetchFilmReviews = (movieId, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=${language}`;\n    return http.get(url);\n}\nexport const fetchFilmCredits = (movieId, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=${language}`;\n    return http.get(url);\n}\n\nconst themoviedbAPI = {\n    fetchTrendingMovies,\n    fetchByName,\n    fetchFilmDetails,\n    fetchFilmReviews,\n    fetchFilmCredits,\n}\n\nexport default themoviedbAPI;","export function successMessage(message) {\n    console.log(message);\n}\nexport function alertMessage(message) {\n    console.log(message);\n}\nexport function errorMessage(message) {\n    console.log(message);\n}\n\nexport const messenger = {\n    successMessage,\n    alertMessage,\n    errorMessage,\n};\n\n"],"names":["IMG_CONFIG","CastRender","cast","size","imgBaseUrl","length","messenger","map","id","imgPath","name","character","src","alt","className","styles","defaultUserImage","Cast","movieId","useParams","useState","status","setStatus","error","setError","actors","setActors","useEffect","themoviedbAPI","then","profile_path","catch","fetch","Loader","msg","get","url","response","ok","json","Promise","reject","Error","API_KEY","BASE_URL","DEFAULT_LANGUAGE","fetchTrendingMovies","page","http","fetchByName","value","language","fetchFilmDetails","fetchFilmReviews","fetchFilmCredits","successMessage","message","console","log","alertMessage","errorMessage"],"sourceRoot":""}