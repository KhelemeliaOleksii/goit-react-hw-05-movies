{"version":3,"file":"static/js/reviews.b6012ce4.chunk.js","mappings":"sPAUe,SAASA,EAAT,GAAqC,IAAZC,EAAW,EAAXA,QACpC,OAAuB,IAAnBA,EAAQC,QACD,sEAGP,wBAEQD,EAAQE,KAAI,YAAsC,IAAnCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAC5B,OACI,2BACI,yBACI,0BAAOF,OAEX,uBAAIC,KACJ,4CAAoBC,OALxB,UAAYF,GAAZ,OAAqBE,SCP9B,SAASC,IACpB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOT,EAAP,KAAgBU,EAAhB,KACA,GAA4BD,EAAAA,EAAAA,UAAS,QAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAkBA,OAjBAC,EAAAA,EAAAA,YAAU,YAGN,SAAeR,GACXK,EAAU,WACVI,EAAAA,GAAAA,iBACsBT,GACjBU,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACLR,EAAWQ,GACXN,EAAU,cAEbO,OAAM,SAACN,GACJD,EAAU,UACVE,EAASD,MAZrBO,CAAMb,KAeP,CAACA,KAEA,gCACgB,YAAXI,IAAwB,SAACU,EAAA,EAAD,IACb,YAAXV,IAAwB,SAACZ,EAAD,CAAeC,QAASA,IACrC,WAAXW,GAAuBW,EAAAA,GAAAA,aAAuB,6BAA8BT,Q,oFC5BzF,EAVa,CACHU,IADG,SACCC,GAAM,OAAD,qHACYJ,MAAMI,GADlB,YACLC,EADK,QAEEC,GAFF,gCAGMD,EAASE,OAHf,wEAKJC,QAAQC,OAAO,IAAIC,MAAM,eALrB,+CCObC,EAAU,mCACVC,EAAW,+BACXC,EAAmB,QAuBnBjB,EAAgB,CAClBkB,oBAtB+B,WAAe,IAAdC,EAAa,uDAAN,EACjCX,EAAG,UAAMQ,EAAN,uCAA6CD,EAA7C,iBAA6DI,GACtE,OAAOC,EAAAA,IAASZ,IAqBhBa,YAnBuB,SAACC,GAAkD,IAA3CH,EAA0C,uDAAnC,EAAGI,EAAgC,uDAArBN,EAC9CT,EAAG,UAAMQ,EAAN,iCAAuCD,EAAvC,qBAA2DQ,EAA3D,iBAA4EJ,EAA5E,sCAA8GG,GACvH,OAAOF,EAAAA,IAASZ,IAkBhBgB,iBAhB4B,SAACjC,GAA0C,IAAjCgC,EAAgC,uDAArBN,EAC3CT,EAAG,UAAMQ,EAAN,kBAAwBzB,EAAxB,oBAA2CwB,EAA3C,qBAA+DQ,GACxE,OAAOH,EAAAA,IAASZ,IAehBiB,iBAb4B,SAAClC,GAA0C,IAAjCgC,EAAgC,uDAArBN,EAC3CT,EAAG,UAAMQ,EAAN,kBAAwBzB,EAAxB,4BAAmDwB,EAAnD,qBAAuEQ,GAChF,OAAOH,EAAAA,IAASZ,IAYhBkB,iBAV4B,SAACnC,GAA0C,IAAjCgC,EAAgC,uDAArBN,EAC3CT,EAAG,UAAMQ,EAAN,kBAAwBzB,EAAxB,4BAAmDwB,EAAnD,qBAAuEQ,GAChF,OAAOH,EAAAA,IAASZ,KAWpB,K,qDC/BO,IAAMF,EAAY,CACrBqB,eAXG,SAAwBC,GAC3BC,QAAQC,IAAIF,IAWZG,aATG,SAAsBH,GACzBC,QAAQC,IAAIF,IASZI,aAPG,SAAsBJ,GACzBC,QAAQC,IAAIF","sources":["components/ReviewsRender/ReviewsRender.js","components/Reviews/Reviews.js","services/themoviedbAPI/requestAPI.js","services/themoviedbAPI/themoviedbAPI.js","utils/messenger.js"],"sourcesContent":["import PropTypes from 'prop-types'\n\n/* function ReviewsRender\ndo: render a reviews list of a movie\n    - if reviews available\n        <>author\n        <>review\n        <>date\n    <-> \"We don't have any review for this movie\"\n  */\nexport default function ReviewsRender({ reviews }) {\n    if (reviews.length === 0) {\n        return <div>We don't have any review for this movie</div>\n    }\n    return (\n        <ul>\n            {\n                reviews.map(({ author, content, created_at }) => {\n                    return (\n                        <li key={`${author}${created_at}`}>\n                            <h5>\n                                <span>{author}</span>\n                            </h5>\n                            <p>{content}</p>\n                            <span> created at: {created_at}</span>\n                        </li>\n                    )\n                })\n            }\n        </ul>\n    )\n}\n\nReviewsRender.propTypes = {\n    reviews: PropTypes.arrayOf(\n        PropTypes.shape({\n            author: PropTypes.string.isRequired,\n            content: PropTypes.string.isRequired,\n            created_at: PropTypes.string.isRequired,\n        }).isRequired\n    ).isRequired\n}","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\"\n\nimport themoviedbAPI from \"services/themoviedbAPI/themoviedbAPI\";\nimport { messenger } from \"utils/messenger\";\n\nimport Loader from \"components/Loader\";\nimport ReviewsRender from \"components/ReviewsRender\";\n\n/* function Reviews\ndo: fetch reviews of a movie\n */\nexport default function Reviews() {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState(null);\n    const [status, setStatus] = useState('idle');\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        fetch(movieId)\n\n        function fetch(movieId) {\n            setStatus('pending');\n            themoviedbAPI\n                .fetchFilmReviews(movieId)\n                .then(({ results }) => {\n                    setReviews(results);\n                    setStatus('resolve');\n                })\n                .catch((error) => {\n                    setStatus('reject');\n                    setError(error);\n                })\n        }\n    }, [movieId])\n    return (\n        <>\n            {status === 'pending' && <Loader />}\n            {status === 'resolve' && <ReviewsRender reviews={reviews} />}\n            {status === 'reject' && messenger.errorMessage('Something wrong. Try again', error)}\n        </>\n    )\n}\n\n","const http = {\n    async get(url) {\n        const response = await fetch(url);\n        if (response.ok) {\n            return await response.json();\n        }\n        return Promise.reject(new Error('Not found'));\n    }\n};\n\nexport default http;","// trending movies : 'https://api.themoviedb.org/3/trending/movie/day?api_key=<<api_key>>'\n// search movie: 'https://api.themoviedb.org/3/search/movie?api_key=70c5c640dcd47438a9460ce1b8e1a5b1&language=en-US&page=1&include_adult=false&query=king'\n// film info: 'https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US'\n// reviews: 'https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=<<api_key>>&language=en-US&page=1'\n// credits: 'https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US'\n\nimport http from './requestAPI'\n\nconst API_KEY = '70c5c640dcd47438a9460ce1b8e1a5b1';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst DEFAULT_LANGUAGE = 'en-US'\n\nexport const fetchTrendingMovies = (page = 1) => {\n    const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`;\n    return http.get(url);\n}\nexport const fetchByName = (value, page = 1, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=${language}&page=${page}&include_adult=false&query=${value}`;\n    return http.get(url);\n}\nexport const fetchFilmDetails = (movieId, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=${language}`;\n    return http.get(url);\n}\nexport const fetchFilmReviews = (movieId, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=${language}`;\n    return http.get(url);\n}\nexport const fetchFilmCredits = (movieId, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=${language}`;\n    return http.get(url);\n}\n\nconst themoviedbAPI = {\n    fetchTrendingMovies,\n    fetchByName,\n    fetchFilmDetails,\n    fetchFilmReviews,\n    fetchFilmCredits,\n}\n\nexport default themoviedbAPI;","export function successMessage(message) {\n    console.log(message);\n}\nexport function alertMessage(message) {\n    console.log(message);\n}\nexport function errorMessage(message) {\n    console.log(message);\n}\n\nexport const messenger = {\n    successMessage,\n    alertMessage,\n    errorMessage,\n};\n\n"],"names":["ReviewsRender","reviews","length","map","author","content","created_at","Reviews","movieId","useParams","useState","setReviews","status","setStatus","error","setError","useEffect","themoviedbAPI","then","results","catch","fetch","Loader","messenger","get","url","response","ok","json","Promise","reject","Error","API_KEY","BASE_URL","DEFAULT_LANGUAGE","fetchTrendingMovies","page","http","fetchByName","value","language","fetchFilmDetails","fetchFilmReviews","fetchFilmCredits","successMessage","message","console","log","alertMessage","errorMessage"],"sourceRoot":""}