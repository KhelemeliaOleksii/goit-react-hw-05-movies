{"version":3,"file":"static/js/movie-details-page.63de96c8.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MovieCardRender/MovieCardRender.module.css?4ddf","components/MovieCardRender/MovieCardRender.js","webpack://react-homework-template/./src/components/GoBackButton/GoBackButton.module.css?1091","components/GoBackButton/GoBackButton.js","pages/MovieDetailsPage/MovieDetailsPage.js","services/themoviedbAPI/requestAPI.js","services/themoviedbAPI/themoviedbAPI.js","utils/messenger.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card__info--general\":\"MovieCardRender_card__info--general__2O1Gs\",\"img__wrapper\":\"MovieCardRender_img__wrapper__2GD90\"};","import { Link, Outlet } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport styles from './MovieCardRender.module.css'\nimport defaultMovieImage from 'default-movie-image.jpg'\n\nconst IMG_CONFIG = {\n    base_url: 'https://image.tmdb.org/t/p/',\n    size: 'w500'\n}\n\n/* function MovieCardRender\ndo: -render a movie card\n    <> backdrop\n    <> title\n    <> score\n    <> overview\n    <> genres\n    <> link on cast\n    <> link on reviews\n */\nexport default function MovieCardRender({ movie, fromLocation }) {\n    const { id, backdrop_path, title, release_date, popularity, overview, genres } = movie;\n    const { base_url, size } = IMG_CONFIG;\n    const imgPath = `${base_url}${size}${backdrop_path}`;\n\n    return (\n        <>\n            <div className={styles['card__info--general']}>\n                <div className={styles['img__wrapper']}>\n                    {!backdrop_path\n                        ? <img src={defaultMovieImage} alt={title} />\n                        : <img src={`${imgPath}`} alt={title} />\n                    }\n\n                </div>\n                <div className={styles['details__wrapper']}>\n                    <h2 >\n                        <span>{title}</span>\n                        <span>({getRelizeYear(release_date)})</span>\n                    </h2>\n                    <p> User score: {getUserScore(popularity)} %</p>\n                    <h3>Overview</h3>\n                    <p>{overview}</p>\n                    <h4>Genres</h4>\n                    <p>{getGenresNames(genres)}</p>\n\n                </div>\n            </div>\n            <div className={styles['card__info--additional']}>\n                <h5>Additional information</h5>\n                <ul>\n                    <li>\n                        <Link\n                            to={`/movies/${id}/cast`}\n                            state={{\n                                from: fromLocation\n                            }}>Cast</Link>\n                    </li>\n                    <li>\n                        <Link\n                            to={`/movies/${id}/reviews`}\n                            state={{\n                                from: fromLocation\n                            }}>Reviews</Link>\n                    </li>\n                </ul>\n            </div>\n            <Outlet />\n        </>\n    )\n}\n\nMovieCardRender.propTypes = {\n    movie: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        backdrop_path: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        release_date: PropTypes.string.isRequired,\n        popularity: PropTypes.number.isRequired,\n        overview: PropTypes.string.isRequired,\n        genres: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired,\n        }).isRequired).isRequired,\n    }).isRequired,\n    fromLocation: PropTypes.shape({\n        location: PropTypes.shape({\n            pathname: PropTypes.string.isRequired,\n            search: PropTypes.string.isRequired,\n        }).isRequired\n    }).isRequired\n}\n\n/* function getRelizeYear\ndo: extrude a year from a full date */\nfunction getRelizeYear(date) {\n    const today = new Date(date);\n    return today.getFullYear();\n}\n/* function getUserScore\ndo: math round an income data\n */\nfunction getUserScore(data) {\n    return Math.round(data);\n}\n\n/* function getGenresNames\ndo: create an array of genre names */\nfunction getGenresNames(data) {\n    return data.map(({ name }) => name).join(', ');\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"GoBackButton_button__cr-V5\",\"button__label\":\"GoBackButton_button__label__58Yuf\",\"button__arrow\":\"GoBackButton_button__arrow__b7SMJ\"};","import styles from './GoBackButton.module.css'\nimport PropTypes from 'prop-types'\n\n/* function GoBackButton \ndo: create a button \"Go back\"\n*/\nexport default function GoBackButton({ onClickHandler }) {\n    const handler = () => {\n        onClickHandler();\n    }\n\n    return (\n        <button type=\"button\" className={styles['button']} onClick={handler}>\n            <span className={styles['button__arrow']}> </span> <span className={styles['button__label']}>Go back</span>\n        </button>\n    )\n}\n\nGoBackButton.propTypes = {\n    onClickHandler: PropTypes.func.isRequired,\n}","import { useEffect, useState } from 'react'\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\n\nimport Loader from 'components/Loader';\nimport MovieCardRender from 'components/MovieCardRender';\nimport GoBackButton from 'components/GoBackButton';\n\nimport themoviedbAPI from 'services/themoviedbAPI/themoviedbAPI';\nimport { messenger } from 'utils/messenger';\n// import styles from './MovieDetailsPage.module.css'\n\nconst DEFAULT_LOCATION_STATE = {\n    location: {\n        pathname: '/',\n        search: '',\n    }\n\n}\nexport default function MovieDetailsPage() {\n    const { movieId } = useParams();\n    const [movie, setMovie] = useState(null);\n    const [status, setStatus] = useState(\"idle\");\n    const [error, setError] = useState(null);\n\n    const location = useLocation();\n    const fromLocation = location?.state?.from ?? DEFAULT_LOCATION_STATE;\n\n    const navigate = useNavigate();\n\n    /* \n    do: fetch by id\n     */\n    useEffect(() => {\n        fetchDetails(movieId);\n\n        /* function fetchDetails\n        do: - set status=pending\n            - fetch\n                <> set movies\n                <> set status=resolve\n            <-> if error\n                <> set error\n                <> set status=reject\n        */\n        function fetchDetails(movieId) {\n            setStatus('pending');\n            themoviedbAPI.fetchFilmDetails(movieId)\n                .then(movieDataWrite)\n                .then((movie) => {\n                    setMovie(movie);\n                    setStatus(\"resolve\");\n                })\n                .catch((error) => {\n                    setError(error);\n                    setStatus('reject');\n                })\n        }\n    }, [movieId])\n\n    /* function GoBackHandler\n    do: navigate to custom url\n     */\n    const GoBackHandler = () => {\n        navigate(fromLocation.location);\n        // вернуться на home або на movies\n        // з касту або обзорів перехід на home або на movies (а не закривання касту)\n        // перехід на movies (повернути пошукове поле)\n    }\n\n    return (\n        <>\n            {status === 'pending' && <Loader />}\n            {status === 'resolve' &&\n                <>\n                    <GoBackButton onClickHandler={GoBackHandler} />\n                    <MovieCardRender movie={movie} fromLocation={fromLocation} />\n                </>}\n            {status === 'reject' && messenger.errorMessage('Error', error)}\n\n        </>\n    )\n}\n\n/* function movieDataWrite\nin: - \"response\" of fetch\ndo: - destruction of \"response\" object\n    - set \"movie\" object properties\nout:- movie    \n */\nfunction movieDataWrite(response) {\n    const { id, backdrop_path, title, release_date, popularity, overview, genres } = response;\n    const movie = {\n        id,\n        backdrop_path,\n        title,\n        release_date,\n        popularity,\n        overview,\n        genres\n    }\n    return movie;\n}","const http = {\n    async get(url) {\n        const response = await fetch(url);\n        if (response.ok) {\n            return await response.json();\n        }\n        return Promise.reject(new Error('Not found'));\n    }\n};\n\nexport default http;","// trending movies : 'https://api.themoviedb.org/3/trending/movie/day?api_key=<<api_key>>'\n// search movie: 'https://api.themoviedb.org/3/search/movie?api_key=70c5c640dcd47438a9460ce1b8e1a5b1&language=en-US&page=1&include_adult=false&query=king'\n// film info: 'https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US'\n// reviews: 'https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=<<api_key>>&language=en-US&page=1'\n// credits: 'https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US'\n\nimport http from './requestAPI'\n\nconst API_KEY = '70c5c640dcd47438a9460ce1b8e1a5b1';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst DEFAULT_LANGUAGE = 'en-US'\n\nexport const fetchTrendingMovies = (page = 1) => {\n    const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`;\n    return http.get(url);\n}\nexport const fetchByName = (value, page = 1, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=${language}&page=${page}&include_adult=false&query=${value}`;\n    return http.get(url);\n}\nexport const fetchFilmDetails = (movieId, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=${language}`;\n    return http.get(url);\n}\nexport const fetchFilmReviews = (movieId, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=${language}`;\n    return http.get(url);\n}\nexport const fetchFilmCredits = (movieId, language = DEFAULT_LANGUAGE) => {\n    const url = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=${language}`;\n    return http.get(url);\n}\n\nconst themoviedbAPI = {\n    fetchTrendingMovies,\n    fetchByName,\n    fetchFilmDetails,\n    fetchFilmReviews,\n    fetchFilmCredits,\n}\n\nexport default themoviedbAPI;","export function successMessage(message) {\n    console.log(message);\n}\nexport function alertMessage(message) {\n    console.log(message);\n}\nexport function errorMessage(message) {\n    console.log(message);\n}\n\nexport const messenger = {\n    successMessage,\n    alertMessage,\n    errorMessage,\n};\n\n"],"names":["IMG_CONFIG","MovieCardRender","data","movie","fromLocation","id","backdrop_path","title","release_date","popularity","overview","genres","size","imgPath","className","styles","src","alt","defaultMovieImage","getRelizeYear","Math","round","getGenresNames","to","state","from","date","Date","getFullYear","map","name","join","GoBackButton","onClickHandler","type","onClick","DEFAULT_LOCATION_STATE","location","pathname","search","MovieDetailsPage","movieId","useParams","useState","setMovie","status","setStatus","error","setError","useLocation","navigate","useNavigate","useEffect","themoviedbAPI","then","movieDataWrite","catch","fetchDetails","Loader","messenger","response","get","url","fetch","ok","json","Promise","reject","Error","API_KEY","BASE_URL","DEFAULT_LANGUAGE","fetchTrendingMovies","page","http","fetchByName","value","language","fetchFilmDetails","fetchFilmReviews","fetchFilmCredits","successMessage","message","console","log","alertMessage","errorMessage"],"sourceRoot":""}